import logging
import asyncio
from aiogram import Router, F, Bot, Dispatcher, types
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import KeyboardButton
from aiogram.filters import Command
from langchain.schema import HumanMessage, SystemMessage
from langchain.chat_models.gigachat import GigaChat

logging.basicConfig(level=logging.INFO)
TARGET_BOT_USERNAME = "kcptraspisaniebot"
router = Router()

class States(StatesGroup):
    menu = State()
    chat_mode = State()

@router.message(Command("start"))
async def start(message, state: FSMContext):
    await show_menu(message, state)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–µ–Ω—é
async def show_menu(message, state: FSMContext):
    menu_keyboard = ReplyKeyboardBuilder()
    menu_keyboard.add(KeyboardButton(text="–°–∞–π—Ç"))
    menu_keyboard.add(KeyboardButton(text="–ò–ò"))
    menu_keyboard.add(KeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"))

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:", reply_markup=menu_keyboard.as_markup(resize_keyboard=True))
    await state.set_state(States.menu)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ò–ò"
@router.message(F.text.contains("–ò–ò"), States.menu)
async def chat_mode(message, state: FSMContext):
    chat = GigaChat(credentials='ZmNlN2MxNjAtNDE3NC00NjlmLTlkNGEtZTdmODQ1ZGYxNWU4OjU0MTIwYTZiLTY2M2MtNGFhZS1iMjk4LWZhMzQwMjBkYTlhNA==', verify_ssl_certs=False, model="GigaChat:latest")
    messages = [SystemMessage(content="–¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ —É—á–µ–±–µ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∫–æ–ª–ª–µ–¥–∂–∞. –¢—ã –º–æ–∂–µ—à—å –ø–æ–º–æ—á—å —Å —Ä–∞–∑–ª–∏—á–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –∏ –≤–æ–ø—Ä–æ—Å–∞–º–∏, —Å–≤—è–∑–∞–Ω–Ω—ã–º–∏ —Å –≤–∞—à–∏–º –æ–±—É—á–µ–Ω–∏–µ–º. –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π: üìö –ü–æ–º–æ—â—å —Å –∑–∞–¥–∞–Ω–∏—è–º–∏ –∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º, —Ç–∞–∫–∏–º –∫–∞–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –¥–∏–∑–∞–π–Ω, –ø–µ–¥–∞–≥–æ–≥–∏–∫–∞ –∏ —Ç.–¥. –¢—ã –º–æ–∂–µ—à—å –æ–±—ä—è—Å–Ω—è—Ç—å –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏, –¥–∞–≤–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã –∫–æ–¥–∞, –ø—Ä–æ–≤–µ—Ä—è—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å —Ä–µ—à–µ–Ω–∏–π. üß† –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º –∏ —Ç–µ—Å—Ç–∞–º. –¢—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—à—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è, —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è, —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏. üìù –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∏—Å—å–º–µ–Ω–Ω—ã—Ö —Ä–∞–±–æ—Ç - —ç—Å—Å–µ, –æ—Ç—á—ë—Ç–æ–≤, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–π. –¢—ã –ø–æ–º–æ–∂–µ—à—å —Å –≥—Ä–∞–º–º–∞—Ç–∏–∫–æ–π, —Å—Ç–∏–ª–µ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π –∏ —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º. üìñ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—á–µ–±–Ω—ã–º —Ä–µ—Å—É—Ä—Å–∞–º - –∫–Ω–∏–≥–∞–º, –≤–∏–¥–µ–æ, –æ–Ω–ª–∞–π–Ω-–∫—É—Ä—Å–∞–º –ø–æ –∏–∑—É—á–∞–µ–º—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º. üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é –≤—Ä–µ–º–µ–Ω–µ–º, –º–µ—Ç–æ–¥–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è, –ø—Ä–µ–æ–¥–æ–ª–µ–Ω–∏—é —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ç.–ø. –¢—ã –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–º–æ—á—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–ª–æ–∂–Ω—ã—Ö —Ç–µ–º–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö. –ü—Ä–æ—Å—Ç–æ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫–æ –º–Ω–µ –≤ –ª—é–±–æ–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è! –¢–∞–∫ –∂–µ –Ω–µ –∑–∞–±—É–¥—å, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–Ω –∏ —Å–æ–∑–¥–∞–Ω —Å—Ç—É–¥–µ–Ω—Ç–æ–º 2 –∫—É—Ä—Å–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ –°–∏—Å—Ç–µ–º—ã –∏ –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ, –õ–µ–≤–∞–Ω—é–∫–æ–º –ù–∏–∫–∏—Ç–æ–π")]
    await state.update_data(messages=messages)
    back_keyboard = ReplyKeyboardBuilder()
    back_keyboard.add(KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å?", reply_markup=back_keyboard.as_markup(resize_keyboard=True))
    await state.set_state(States.chat_mode)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–°–∞–π—Ç"
@router.message(F.text.contains("–°–∞–π—Ç"), States.menu)
async def open_website(message: types.Message, state: FSMContext):
    website_url = "https://kcpt72.ru/"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π URL —Å–∞–π—Ç–∞
    await message.answer(f"–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ, –ª–∏–±–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ: {website_url}", reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="–°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞", url=website_url)]]
    ))

@router.message(F.text.contains("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), States.menu)
async def send_to_target_bot(message: types.Message, state: FSMContext, bot: Bot):
    keyboard = ReplyKeyboardBuilder().as_markup(resize_keyboard=True)
    await bot.send_message(chat_id=message.chat.id, text=f"–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –±–æ—Ç–∞:", reply_markup=types.InlineKeyboardMarkup(
        inline_keyboard=[[types.InlineKeyboardButton(text="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ö–¶–ü–¢", url=f"https://t.me/{TARGET_BOT_USERNAME}")]]
    ))

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ —á–∞—Ç–∞
@router.message(F.text, States.chat_mode)
async def chat_handler(message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await back_to_menu(message, state)
        return
    chat = GigaChat(credentials='ZmNlN2MxNjAtNDE3NC00NjlmLTlkNGEtZTdmODQ1ZGYxNWU4OjU0MTIwYTZiLTY2M2MtNGFhZS1iMjk4LWZhMzQwMjBkYTlhNA==', verify_ssl_certs=False)
    data = await state.get_data()
    messages = data.get('messages', [])
    messages.append(HumanMessage(content=message.text))
    res = chat.invoke(messages)
    messages.append(res)
    await state.update_data(messages=messages)
    await message.answer(res.content)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
@router.message(Command("–ù–∞–∑–∞–¥"), States.chat_mode)
async def back_to_menu(message, state: FSMContext):
    await state.set_state(States.menu)
    await show_menu(message, state)


async def main():
    API_TOKEN = '6502399298:AAFOP64SuLeETl8QTfQfhVuzVEptnu2f-BA'
    bot = Bot(token=API_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())